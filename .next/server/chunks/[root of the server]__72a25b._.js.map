{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/VSCodeRepos/playlist-knapsack/src/app/api/callback/route.ts"],"sourcesContent":["import { redirect } from 'next/navigation';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { setCookie } from 'nookies';\r\n\r\nconst { NEXT_PUBLIC_SPOTIFY_CLIENT_ID, NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET } = process.env;\r\n\r\nexport async function GET(req: NextRequest) {\r\n    const { searchParams } = new URL(req.url);\r\n    const code = searchParams.get('code');\r\n    const state = searchParams.get('state');\r\n\r\n    if (!code || !state) {\r\n        return NextResponse.json({ error: 'Invalid request' }, { status: 400 });\r\n    }\r\n\r\n    const authOptions = {\r\n        url: 'https://accounts.spotify.com/api/token',\r\n        form: {\r\n            code: code as string,\r\n            redirect_uri: \"http://localhost:3000/api/callback\",\r\n            grant_type: 'authorization_code'\r\n        },\r\n        headers: {\r\n            'content-type': 'application/x-www-form-urlencoded',\r\n            'Authorization': 'Basic ' + (Buffer.from(NEXT_PUBLIC_SPOTIFY_CLIENT_ID + ':' + NEXT_PUBLIC_SPOTIFY_CLIENT_SECRET).toString('base64'))\r\n        },\r\n        json: true\r\n    };\r\n\r\n    try {\r\n        const response = await fetch(authOptions.url, {\r\n            method: 'POST',\r\n            headers: authOptions.headers,\r\n            body: new URLSearchParams(authOptions.form as Record<string, string>).toString()\r\n        });\r\n\r\n        const data = await response.json();\r\n        console.log('data: ', data);\r\n\r\n        if (response.ok) {\r\n            // Store the access token in a cookie\r\n            setCookie({ res: NextResponse }, 'spotify_access_token', data.access_token, {\r\n                httpOnly: true,\r\n                secure: process.env.NODE_ENV !== 'development',\r\n                maxAge: 3600,\r\n                path: '/'\r\n            });\r\n\r\n            // Redirect the user to the home page\r\n            redirect('/');\r\n        } else {\r\n            return NextResponse.json(data, { status: response.status });\r\n        }\r\n    } catch (error) {\r\n        console.error('error: ', error);\r\n        return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAFA;;;;AAIA,MAAM,EAAE,6BAA6B,EAAE,iCAAiC,EAAE,GAAG,QAAQ,GAAG;AAEjF,eAAe,IAAI,GAAgB;IACtC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,MAAM,QAAQ,aAAa,GAAG,CAAC;IAE/B,IAAI,CAAC,QAAQ,CAAC,OAAO;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACzE;IAEA,MAAM,cAAc;QAChB,KAAK;QACL,MAAM;YACF,MAAM;YACN,cAAc;YACd,YAAY;QAChB;QACA,SAAS;YACL,gBAAgB;YAChB,iBAAiB,WAAY,OAAO,IAAI,CAAC,gCAAgC,MAAM,mCAAmC,QAAQ,CAAC;QAC/H;QACA,MAAM;IACV;IAEA,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,YAAY,GAAG,EAAE;YAC1C,QAAQ;YACR,SAAS,YAAY,OAAO;YAC5B,MAAM,IAAI,gBAAgB,YAAY,IAAI,EAA4B,QAAQ;QAClF;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,QAAQ,GAAG,CAAC,UAAU;QAEtB,IAAI,SAAS,EAAE,EAAE;YACb,qCAAqC;YACrC,CAAA,GAAA,0IAAA,CAAA,YAAS,AAAD,EAAE;gBAAE,KAAK,gIAAA,CAAA,eAAY;YAAC,GAAG,wBAAwB,KAAK,YAAY,EAAE;gBACxE,UAAU;gBACV,QAAQ,oDAAyB;gBACjC,QAAQ;gBACR,MAAM;YACV;YAEA,qCAAqC;YACrC,CAAA,GAAA,uLAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO;YACH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;gBAAE,QAAQ,SAAS,MAAM;YAAC;QAC7D;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,WAAW;QACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ"}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}