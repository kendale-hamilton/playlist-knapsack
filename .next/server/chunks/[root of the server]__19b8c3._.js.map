{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/VSCodeRepos/playlist-knapsack/src/app/api/callback/route.ts"],"sourcesContent":["import { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { setCookie } from \"nookies\";\r\n\r\nconst { client_id, client_secret } = process.env;\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n    const code = req.query.code || null;\r\n    const state = req.query.state || null;\r\n\r\n    if (state === null) {\r\n        res.redirect('/');\r\n    } else {\r\n        const authOptions = {\r\n            url: 'https://accounts.spotify.com/api/token',\r\n            form: {\r\n                code: code as string,\r\n                redirect_uri: \"http://localhost:3000/api/callback\",\r\n                grant_type: 'authorization_code'\r\n            },\r\n            headers: {\r\n                'content-type': 'application/x-www-form-urlencoded',\r\n                'Authorization': 'Basic ' + (Buffer.from(client_id + ':' + client_secret).toString('base64'))\r\n            },\r\n            json: true\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(authOptions.url, {\r\n                method: 'POST',\r\n                headers: authOptions.headers,\r\n                body: new URLSearchParams(authOptions.form as Record<string, string>).toString()\r\n            });\r\n\r\n            const data = await response.json();\r\n            console.log('data: ', data);\r\n\r\n            if (response.ok) {\r\n                // Store the access token in a cookie\r\n                setCookie({ res }, 'spotify_access_token', data.access_token, {\r\n                    httpOnly: true,\r\n                    secure: process.env.NODE_ENV !== 'development',\r\n                    maxAge: 3600,\r\n                    path: '/'\r\n                });\r\n\r\n                // Redirect the user to the home page\r\n                res.redirect('/');\r\n            } else {\r\n                res.status(response.status).json(data);\r\n            }\r\n        } catch (error) {\r\n            console.error('error: ', error);\r\n            res.status(500).json({ error: 'Internal Server Error' });\r\n        }\r\n    }\r\n};"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE,GAAG,QAAQ,GAAG;uCAEjC,OAAO,KAAqB;IACvC,MAAM,OAAO,IAAI,KAAK,CAAC,IAAI,IAAI;IAC/B,MAAM,QAAQ,IAAI,KAAK,CAAC,KAAK,IAAI;IAEjC,IAAI,UAAU,MAAM;QAChB,IAAI,QAAQ,CAAC;IACjB,OAAO;QACH,MAAM,cAAc;YAChB,KAAK;YACL,MAAM;gBACF,MAAM;gBACN,cAAc;gBACd,YAAY;YAChB;YACA,SAAS;gBACL,gBAAgB;gBAChB,iBAAiB,WAAY,OAAO,IAAI,CAAC,YAAY,MAAM,eAAe,QAAQ,CAAC;YACvF;YACA,MAAM;QACV;QAEA,IAAI;YACA,MAAM,WAAW,MAAM,MAAM,YAAY,GAAG,EAAE;gBAC1C,QAAQ;gBACR,SAAS,YAAY,OAAO;gBAC5B,MAAM,IAAI,gBAAgB,YAAY,IAAI,EAA4B,QAAQ;YAClF;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,QAAQ,GAAG,CAAC,UAAU;YAEtB,IAAI,SAAS,EAAE,EAAE;gBACb,qCAAqC;gBACrC,CAAA,GAAA,0IAAA,CAAA,YAAS,AAAD,EAAE;oBAAE;gBAAI,GAAG,wBAAwB,KAAK,YAAY,EAAE;oBAC1D,UAAU;oBACV,QAAQ,oDAAyB;oBACjC,QAAQ;oBACR,MAAM;gBACV;gBAEA,qCAAqC;gBACrC,IAAI,QAAQ,CAAC;YACjB,OAAO;gBACH,IAAI,MAAM,CAAC,SAAS,MAAM,EAAE,IAAI,CAAC;YACrC;QACJ,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,WAAW;YACzB,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBAAE,OAAO;YAAwB;QAC1D;IACJ;AACJ"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}