{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/VSCodeRepos/playlist-knapsack/src/app/api/callback/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { cookies } from \"next/headers\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n    const { searchParams } = new URL(req.url);\r\n    const code = searchParams.get('code');\r\n    const state = searchParams.get('state');\r\n    const baseUrl = `${req.nextUrl.protocol}//${req.nextUrl.host}`;\r\n  \r\n    if (!code || !state) {\r\n      return NextResponse.redirect(`${baseUrl}/error?message=Missing%20parameters`);\r\n    }\r\n  \r\n    try {\r\n      // Exchange the authorization code for an access token\r\n        const response = await fetch('https://accounts.spotify.com/api/token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                Authorization: `Basic ${btoa(`${process.env.SPOTIFY_CLIENT_ID}:${process.env.SPOTIFY_CLIENT_SECRET}`)}`,\r\n            },\r\n            body: new URLSearchParams({\r\n                grant_type: 'authorization_code',\r\n                code,\r\n                redirect_uri: 'http://localhost:3000/api/callback',\r\n            }),\r\n        });\r\n    \r\n        const { access_token, refresh_token } = await response.json();\r\n\r\n        const meRes = await fetch('https://api.spotify.com/v1/me', {\r\n            headers: {\r\n                Authorization: `Bearer ${access_token}`,\r\n            },\r\n        });\r\n\r\n        const { display_name, email, id, images } = await meRes.json();\r\n\r\n        const cookieStore = await cookies();\r\n        cookieStore.set('userId', id);\r\n        cookieStore.set('userDisplayName', display_name);\r\n        cookieStore.set('userEmail', email);\r\n        cookieStore.set('userAvatar', images[0].url);\r\n        cookieStore.set('accessToken', access_token);\r\n        cookieStore.set('refreshToken', refresh_token);\r\n\r\n        const res = NextResponse.redirect(`${baseUrl}`);\r\n\r\n        return res;\r\n    } catch (error) {\r\n        console.error('Failed to fetch access token:', error);\r\n        return NextResponse.redirect(`${baseUrl}/error?message=Token%20exchange%20failed`);\r\n    }\r\n  }"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,IAAI,GAAgB;IACtC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;IACxC,MAAM,OAAO,aAAa,GAAG,CAAC;IAC9B,MAAM,QAAQ,aAAa,GAAG,CAAC;IAC/B,MAAM,UAAU,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,OAAO,CAAC,IAAI,EAAE;IAE9D,IAAI,CAAC,QAAQ,CAAC,OAAO;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,QAAQ,mCAAmC,CAAC;IAC9E;IAEA,IAAI;QACF,sDAAsD;QACpD,MAAM,WAAW,MAAM,MAAM,0CAA0C;YACnE,QAAQ;YACR,SAAS;gBACL,gBAAgB;gBAChB,eAAe,CAAC,MAAM,EAAE,KAAK,GAAG,QAAQ,GAAG,CAAC,iBAAiB,CAAC,CAAC,EAAE,QAAQ,GAAG,CAAC,qBAAqB,EAAE,GAAG;YAC3G;YACA,MAAM,IAAI,gBAAgB;gBACtB,YAAY;gBACZ;gBACA,cAAc;YAClB;QACJ;QAEA,MAAM,EAAE,YAAY,EAAE,aAAa,EAAE,GAAG,MAAM,SAAS,IAAI;QAE3D,MAAM,QAAQ,MAAM,MAAM,iCAAiC;YACvD,SAAS;gBACL,eAAe,CAAC,OAAO,EAAE,cAAc;YAC3C;QACJ;QAEA,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,IAAI;QAE5D,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,YAAY,GAAG,CAAC,UAAU;QAC1B,YAAY,GAAG,CAAC,mBAAmB;QACnC,YAAY,GAAG,CAAC,aAAa;QAC7B,YAAY,GAAG,CAAC,cAAc,MAAM,CAAC,EAAE,CAAC,GAAG;QAC3C,YAAY,GAAG,CAAC,eAAe;QAC/B,YAAY,GAAG,CAAC,gBAAgB;QAEhC,MAAM,MAAM,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,SAAS;QAE9C,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,GAAG,QAAQ,wCAAwC,CAAC;IACrF;AACF"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}